Cpyrr

{
   x:=(7*8.36+(98+7.14)*8.9)/8;  /* test affectation d'expression arithmetique */
    
   while (a<b or f(ertfe[ghghg].lmlm,45)) and d>=e do{  /* test de l'instruction tant que et des expressions booleens */
     a := a + c;        
     p(arg1,f(a,b+3,c<3));   /* appel de fonction */
     a:= f(af,t[45*10/f(a,b,c)]);   /* affectation du resultat d'une fonction */
   };
   
   
   if a-f(a[12/a<=b])and (b!=c) or c=f(wwfe.dza[tad.bn[aa.d]],4) then{   /* test de if then else */
       a:=p(e,f);
   }else{
       void    /* test instruction vide dans un bloc d'instruction */
   };
   
   if(((b<c)or(tu!=g_dpp(a.v.d.q,z(dfds,f[fdkl].gf)))))then{   /* test de if then sans le else */
       c:=c%pl;    /* test de l'operateur modulo */
   };
   
   read(a,b,d,fsd.hyh[12].gfg[fdze]);    /* test de l'instruction lire avec une liste de variable */
     
   write("bonjour %d");       /* test de l'instruction ecrire avec un format sans liste de variable */
   write("test2_5fdsv \% ,%d ,%f,%ws",va1,va2);    /* test de l'instruction ecrire avec une liste de variable */
   
   
   /*a:= "ere"+"ere";*/   /* la concatenation ne fonctionne pas */  
   
   return "jhfgdfgdf";   /* test de l'instruction retour et des chaines constantes */

}   /* fin du bloc d'instruction et donc du programme */



